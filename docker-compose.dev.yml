services:
  # Go Backend (Development)
  backend:
    build:
      context: ./golang-backend
      dockerfile: Dockerfile.dev
    container_name: neural-decks-backend-dev
    ports:
      - "8080:8080"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - REDIS_PASSWORD=
      - REDIS_URL=redis://redis:6379
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=neural_decks
      - WATCHPACK_POLLING=true
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ./golang-backend/web:/app
      - ./golang-backend/.air.toml:/app/.air.toml
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - neural-decks-network

  # React Frontend (Development)
  frontend:
    build:
      context: ./react-frontend
      dockerfile: Dockerfile.dev
    container_name: neural-decks-frontend-dev
    ports:
      - "5173:5173"
    volumes:
      - ./react-frontend:/app
      - /app/node_modules
    environment:
      - VITE_API_URL=http://localhost:8080
      - WATCHPACK_POLLING=true
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - neural-decks-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: neural-decks-postgres-dev
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=neural_decks
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - neural-decks-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: neural-decks-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data_dev:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - neural-decks-network

  # Redis Commander for development
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: neural-decks-redis-commander-dev
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - neural-decks-network

volumes:
  postgres_data_dev:
    driver: local
  redis_data_dev:
    driver: local

networks:
  neural-decks-network:
    driver: bridge 